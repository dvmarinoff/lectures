/*Install and configure*/
apt-get install git

Home directory: ~/.gitconfig

git config --system
git config --global    //to user level
git config 	       //project level

git config --global user.name "Pesho Peshev"
git config --global user.email "some@kaspichan.com"
git config --list

cd ~	//make sure that you are in your user directory

ls -la	//lists the directory

cat .gitconfig	//opens the file

git config --global core.editor "Text Editor -wl1"
//w - wait; l1 - start at line one
git config --global color.ui true

/*Auto-completion*/
//Download from github
curl -OL http://github.com/git/git/raw/master/contrib/completion/git-completion.bash

//Rename
mv ~/git-completion.bash ~/.git-completion.bash

/*Git help*/
git help log
man git log

f - forward
b - backwards
q - quit


//Edit
~/.bash_profile or ~/.bashrc

//Script
if [ -f ~/.git-completion.bash ]; then
 source ~/.git-completion.bash
fi

/*Geting started*/
//Initializing repository
git init	//initialize

mkdir	//make new directory
pwd	//print working directory

//First commit
git add .	//push all the changes to git of the current directory
git add file.txt	//push only file.txt
git commit -m "Initial commit"

make changes --> add the changes --> commit changes to the repository with a message

//Log message
git log

commit 7aa195bd44ea0610796a1fcac8024c4a556f0621	//commit id
Author: Some Someone <someone@somewhere.com>
Date: Fri Jun 15 08:29:22 2012 -0400
	Initial commit

git log -n 4	//will limit the showed commits to 4
git log --since=2012-06-15	//will show commits since the date
git log --until=2012-06-15
git log --author "Some"	//will show commits by author, part of name is needed only.
git log --grep="Init"	//global regular expression search

/*Git Concepts and Architecture*/

two-tree architecture -
	- repository and working tree
	- you checkout copy from repository and than commit.
	- 

three-tree architecture -
	- repository, staging index, working tree
	- first add to staging index than commit
	- git add pushes to the staging index tree

workflow -
	- A, B and C are not tree different files, but they are set of changes
	not necessary to one file, but multiple files. Not versions or files,
	but snaphots of changes.

hash values (SHA-1) -
	- git generates a checksum for each change set -
	- checksum algorithms convert data into a simple number
	- same data always equals same checksum
	- git uses SHA-1 hash algorithm to create checksums -
	- 40-character hex string (0-9,a-f)
	- each shecksum refers to it's parent so git can keep track to change sets

HEAD pointer -
	- HEAD is the tip of the currently selected branch in the repository

/*Making changes to files*/
git status	//check changes that are not staged for commit 

